package bg.jwd.servlets;

import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import bg.jwd.contracts.IConstants;
import bg.jwd.database.Database;
import bg.jwd.models.Employee;

public class GetAllEmployeesServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest httpRequest, HttpServletResponse httpResponse) 
			throws ServletException, IOException {
			
		String search = httpRequest.getParameter(IConstants.SEARCH_PARAMETER);
		String searchedEmployeeID = httpRequest.getParameter(IConstants.ID_PARAMETER);
		String sortBy = httpRequest.getParameter(IConstants.SORT_BY_PARAMETER);
		String deleteEmployeeID = httpRequest.getParameter("deleteEmployeeID");
		
		if (search != null && !search.isEmpty()) {
			this.searchEmployees(httpRequest, httpResponse, search);
		}
		else if (searchedEmployeeID != null && !searchedEmployeeID.isEmpty()) {	
			this.getEmployee(httpRequest, httpResponse, searchedEmployeeID);
		}
		else if (sortBy != null && !sortBy.isEmpty()) {
			this.sortEmployees(httpRequest, httpResponse, sortBy);
		}
		else if (deleteEmployeeID != null && !deleteEmployeeID.isEmpty()) {
			this.deleteEmployee(httpRequest, httpResponse, deleteEmployeeID);
		}		
		else {
			this.getAllEmployees(httpRequest, httpResponse);
		}
	}
	
	private void searchEmployees(HttpServletRequest httpRequest, HttpServletResponse httpResponse, 
			String searchParameter) throws IOException {
		
		List<Employee> matchedEmployees = null;
		
		try {
			matchedEmployees = Database.searchEmployees(searchParameter);
			
			httpRequest.getSession().setAttribute(IConstants.MATCHED_PARAMETER, matchedEmployees);
			httpResponse.sendRedirect(IConstants.SEARCH_RESULTS_PAGE + "?search=" + searchParameter);
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void getEmployee(HttpServletRequest httpRequest, HttpServletResponse httpResponse, 
			String searchedEmployeeID) throws IOException {
		
		int id = Integer.parseInt(searchedEmployeeID);
		Employee employee = null;
		
		try {
			employee = Database.getEmployee(id);
		} 
		catch (Exception e) { 
			e.printStackTrace();
		}
		
		httpRequest.getSession().setAttribute(IConstants.SELECTED_EMPLOYEE_PARAMETER, employee);
		httpResponse.sendRedirect(IConstants.EMPLOYEE_PROFILE_PAGE + "?" + IConstants.ID_PARAMETER + "=" + id);
	}
	
	private void sortEmployees(HttpServletRequest httpRequest, HttpServletResponse httpResponse, 
			String sortEmployeesBy) throws IOException {
		
		List<Employee> sortedEmployees = null;
		
		try {
			if (sortEmployeesBy.equals(IConstants.LAST_NAME_PARAMETER)) {
				sortedEmployees = Database.sortEmployeesByLastName();
			}
			else if (sortEmployeesBy.equals(IConstants.DATE_OF_BIRTH_PARAMETER)) {
				sortedEmployees = Database.sortEmployeesByDateOfBirth();
			}
			else {
				throw new InvalidParameterException("Employees can be sorted only by Last Name and Date of Birth!");
			}
			
			httpRequest.getSession().setAttribute(IConstants.MATCHED_PARAMETER, sortedEmployees);
			httpResponse.sendRedirect(IConstants.SEARCH_RESULTS_PAGE + "?sortBy=" + sortEmployeesBy);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void deleteEmployee(HttpServletRequest httpRequest, HttpServletResponse httpResponse, 
			String deleteEmployeeID) throws IOException {
		int id = Integer.parseInt(deleteEmployeeID);
		
		try {
			boolean isEmployeeDeleted = Database.deleteEmployee(id);
			
			if () {
				
			}
			
			httpResponse.sendRedirect(IConstants.EMPLOYEE_PROFILE_PAGE);
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void getAllEmployees(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException {
		List<Employee> allEmployees = null;
		
		try {
			allEmployees = Database.getAllEmployees();
			
			httpRequest.getSession().setAttribute(IConstants.ALL_EMPLOYEES_PARAMETER, allEmployees);
			httpResponse.sendRedirect(IConstants.SHOW_ALL_EMPLOYEES_PAGE);
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}
